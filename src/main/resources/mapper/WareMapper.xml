<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.erp_mes.mes.stock.mapper.WareMapper">
    
    <!-- 창고 목록 조회 -->
    <select id="selectWarehouseList" resultType="com.erp_mes.mes.stock.dto.WarehouseDTO">
        SELECT 
            w.warehouse_id as warehouseId,
            w.warehouse_name as warehouseName,
            w.warehouse_type as warehouseType,
            w.warehouse_status as warehouseStatus,
            w.warehouse_location as warehouseLocation,
            w.emp_id as empId,
            e.emp_name as empName,
            w.description,
            w.create_date as createDate,
            w.update_date as updateDate
        FROM warehouse w
        LEFT JOIN employee e ON w.emp_id = e.emp_id
        WHERE 1=1
        <if test="warehouseType != null and warehouseType != ''">
            AND w.warehouse_type = #{warehouseType}
        </if>
        <if test="warehouseStatus != null and warehouseStatus != ''">
            AND w.warehouse_status = #{warehouseStatus}
        </if>
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (w.warehouse_id LIKE '%' || #{searchKeyword} || '%'
                OR w.warehouse_name LIKE '%' || #{searchKeyword} || '%')
        </if>
        ORDER BY w.create_date DESC
    </select>
    
    <!-- 창고 중복 체크 -->
    <select id="existsWarehouseById" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM warehouse
        WHERE warehouse_id = #{warehouseId}
    </select>
    
    <!-- 창고 등록 -->
    <insert id="insertWarehouse">
        INSERT INTO warehouse (
            warehouse_id, 
            warehouse_name, 
            warehouse_type, 
            warehouse_status,
            warehouse_location, 
            emp_id, 
            description, 
            create_date
        ) VALUES (
            #{warehouseId}, 
            #{warehouseName}, 
            #{warehouseType}, 
            #{warehouseStatus},
            #{warehouseLocation}, 
            #{empId}, 
            #{description}, 
            SYSDATE
        )
    </insert>
    
    <!-- 창고 수정 -->
    <update id="updateWarehouse">
	    UPDATE warehouse
	    SET warehouse_name = #{warehouseName},
	        warehouse_type = #{warehouseType},
	        warehouse_status = #{warehouseStatus},
	        warehouse_location = #{warehouseLocation},
	        emp_id = #{empId}, 
	        description = #{description},
	        update_date = SYSDATE
	    WHERE warehouse_id = #{warehouseId}
	</update>
    
    <!-- 창고 삭제 -->
    <delete id="deleteWarehouses">
        DELETE FROM warehouse
        WHERE warehouse_id IN
        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
    
    <!-- 창고 사용중 체크 (창고에 재고가 있는지) -->
    <select id="checkWarehouseInUse" resultType="int">
        SELECT COUNT(*) 
        FROM warehouse_item
        WHERE warehouse_id = #{warehouseId}
        AND item_amount > 0
    </select>
    
    <!-- 입고 목록 조회 -->
	<select id="selectInputList" resultType="map">
	    SELECT 
	        i.in_id as "inId",
	        i.warehouse_id as "warehouseId",
	        w.warehouse_name as "warehouseName",
	        i.material_id as "materialId",
	        m.material_name as "materialName",
	        i.product_id as "productId",  
	        p.product_name as "productName",
	        i.purchase_id as "purchaseId", 
	        i.client_id as "clientId",
	        c.client_name as "clientName",
	        i.in_count as "inCount",
	        i.emp_id as "empId",
	        e.emp_name as "empName",
	        i.in_status as "inStatus",
	        i.in_type as "inType",
	        TO_CHAR(i.in_complete, 'YYYY-MM-DD HH24:MI:SS') as "inComplete",
	        i.location_id as "locationId",
	        i.batch_id as "batchId"
	    FROM input i
	    LEFT JOIN warehouse w ON i.warehouse_id = w.warehouse_id
	    LEFT JOIN material m ON i.material_id = m.material_id
	    LEFT JOIN product p ON i.product_id = p.product_id  
	    LEFT JOIN client c ON i.client_id = c.client_id
	    LEFT JOIN employee e ON i.emp_id = e.emp_id
	    WHERE 1=1
	    ORDER BY i.in_complete DESC
	</select>
	
	<select id="selectPendingPurchases" resultType="map">
	    SELECT 
	        p.purchase_id as "purId",
	        p.client_id as "clientId",
	        c.client_name as "clientName",
	        TO_CHAR(p.purchase_date, 'YYYY-MM-DD') as "purDate",
	        p.purchase_status as "purStatus",
	        p.total_purchase_qty as "totalQty",
	        p.total_purchase_price as "totalPrice",
	        (SELECT COUNT(*) FROM purchase_detail pd WHERE pd.purchase_id = p.purchase_id) as "itemCount"
	    FROM purchase p
	    LEFT JOIN client c ON p.client_id = c.client_id
	    WHERE p.purchase_status IN ('REQUEST', 'WAITING')  <!-- COMPLETION 제외 -->
	    ORDER BY p.purchase_date DESC, p.purchase_id DESC
	</select>
	
	<!-- 발주 상세 조회 -->
	<select id="selectPurchaseDetails" resultType="map">
	    SELECT 
	        pd.id as "purDetailId",
	        pd.purchase_id as "purId",
	        pd.material_id as "materialId",
	        pd.material_name as "materialName",
	        pd.purchase_qty as "orderQty",
	        pd.purchase_detail_status as "status",
	        pd.unit,
	        NVL(m.quantity, 0) as "currentStock",
	        COALESCE(
	            (SELECT SUM(i.in_count) 
	             FROM input i 
	             WHERE i.purchase_id = pd.purchase_id 
	             AND i.material_id = pd.material_id
	             AND i.in_status != '입고반려'), 0
	        ) as "receivedQty"
	    FROM purchase_detail pd
	    LEFT JOIN material m ON pd.material_id = m.material_id
	    WHERE pd.purchase_id = #{purId}
	    ORDER BY pd.material_id
	</select>
	
	<!-- 발주 상태 업데이트 -->
	<update id="updatePurchaseStatus">
	    UPDATE purchase 
	    SET purchase_status = #{status},
	        update_at = SYSDATE
	    WHERE purchase_id = #{purId}
	</update>
	
	<!-- 특정 품목의 발주 상세 조회 -->
	<select id="selectPurchaseDetailByMaterial" resultType="map">
	    SELECT 
	        pd.id as "purDetailId",
	        pd.purchase_qty as "orderQty",
	        pd.purchase_detail_status as "status",
	        COALESCE(
	            (SELECT SUM(i.in_count) 
	             FROM input i 
	             WHERE i.purchase_id = pd.purchase_id 
	             AND i.material_id = pd.material_id
	             AND i.in_status != '입고반려'), 0
	        ) as "receivedQty"
	    FROM purchase_detail pd
	    WHERE pd.purchase_id = #{purId}
	    AND pd.material_id = #{materialId}
	</select>
	
	<update id="updatePurchaseDetailStatus">
	    UPDATE purchase_detail
	    SET purchase_detail_status = #{status},
	        update_at = SYSDATE
	    WHERE purchase_id = #{purId}
	    AND material_id = #{materialId}
	</update>
	
	<!-- Product warehouse_item 관련 쿼리 -->
	<select id="getPartiallyFilledLocationsProduct" resultType="map">
	    <![CDATA[
	    SELECT 
	        location_id as "locationId",
	        item_amount as "itemAmount"
	    FROM warehouse_item
	    WHERE warehouse_id = #{warehouseId}
	    AND product_id = #{productId}
	    AND item_amount < #{maxAmount}
	    AND use_yn = 'Y'
	    ORDER BY item_amount ASC
	    ]]>
	</select>
	
	<update id="updateWarehouseItemAmountProduct" parameterType="map">
	    UPDATE warehouse_item
	    SET item_amount = item_amount + #{addAmount},
	        update_date = SYSDATE
	    WHERE location_id = #{locationId}
	    AND product_id = #{productId}
	</update>

	<insert id="insertWarehouseItemProduct" parameterType="map">
	    INSERT INTO warehouse_item (
	        manage_id,
	        warehouse_id,
	        product_id,
	        item_amount,
	        location_id,
	        use_yn,
	        create_date,
	        emp_id
	    ) VALUES (
	        #{manageId},
	        #{warehouseId},
	        #{productId},
	        #{itemAmount},
	        #{locationId},
	        'Y',
	        SYSDATE,
	        #{empId}
	    )
	</insert>
	
	<!-- 빈 위치 조회 -->
	<select id="getEmptyLocations" resultType="string">
	    SELECT il.location_id
	    FROM item_location il
	    WHERE il.warehouse_id = #{warehouseId}
	    AND il.zone_yn = 'Y'
	    AND NOT EXISTS (
	        SELECT 1 
	        FROM warehouse_item wi
	        WHERE wi.location_id = il.location_id
	        AND wi.item_amount > 0
	    )
	    ORDER BY il.loc_zone, il.loc_rack, il.loc_level, il.loc_cell
	    FETCH FIRST 10 ROWS ONLY
	</select>
	
	<!-- 오늘 입고 건수 조회 -->
	<select id="getTodayInputCount" resultType="int">
	    SELECT NVL(COUNT(*), 0)
	    FROM input
	    WHERE in_id LIKE 'IN' || #{today} || '%'
	</select>
	
	<!-- 입고 등록 -->
	<insert id="insertInput" parameterType="map">
	    INSERT INTO input (
	        in_id, 
	        warehouse_id,
	        <if test="productId != null">product_id,</if>
	        <if test="materialId != null">material_id,</if>
	        <if test="purchaseId != null and purchaseId != ''">purchase_id,</if> 
	        result_id, 
	        client_id, 
	        in_count, 
	        emp_id, 
	        in_status,
	        in_type,
	        batch_id,
	        in_reason,
	        in_remark,
	        in_complete
	    ) VALUES (
	        #{inId}, 
	        #{warehouseId},
	        <if test="productId != null">#{productId},</if>
	        <if test="materialId != null">#{materialId},</if>
	        <if test="purchaseId != null and purchaseId != ''">#{purchaseId},</if>
	        #{resultId, jdbcType=NUMERIC},
	        #{clientId},
	        #{inCount}, 
	        #{empId}, 
	        #{inStatus},
	        #{inType, jdbcType=VARCHAR},
	        #{batchId, jdbcType=VARCHAR},
	        #{inReason, jdbcType=VARCHAR},
	        #{inRemark, jdbcType=VARCHAR},
	        SYSDATE
	    )
	</insert>
	
	<!-- 입고 상세 조회 -->
	<select id="selectInputById" resultType="map">
	    SELECT * FROM input WHERE in_id = #{inId}
	</select>

	
	<!-- 입고 상태 업데이트 -->
	<update id="updateInputStatusWithReason">
	    UPDATE input 
	    SET in_status = #{status},
	        in_reason = #{reason},
	        update_date = SYSDATE
	    WHERE in_id = #{inId}
	</update>
	
	<!-- 재고 증가 -->
	<update id="increaseStock">
	    UPDATE warehouse_item 
	    SET item_amount = item_amount + #{inCount},
	        update_date = SYSDATE
	    WHERE warehouse_id = #{warehouseId}
	    AND product_id = #{productId}
	    AND location_id = #{locationId}
	</update>
	
	<!-- 입고 상태 업데이트 (단순 상태만 변경) -->
	<update id="updateInputStatus">
	    UPDATE input 
	    SET in_status = #{status},
	        update_date = SYSDATE
	    WHERE in_id = #{inId}
	</update>
	
	<!-- 부품 목록 조회 -->
	<select id="selectPartsList" resultType="map">
	    SELECT 
	        product_id as "productId",
	        product_name as "productName"
	    FROM product
	    WHERE product_type = '부품'
	    ORDER BY product_name
	</select>
	
	<!-- 완제품 목록 조회 -->
	<select id="selectProductsForInput" resultType="map">
	    SELECT 
	        product_id as "productId",
	        product_name as "productName"
	    FROM product
	    WHERE product_type = 'PTYPE001'
	    ORDER BY product_name
	</select>
	
	<select id="selectTodayProductionForInput" resultType="map">
	    SELECT 
	        wr.result_id as "resultId",
	        wr.work_order_id as "workOrderId", 
	        wr.good_qty as "availableQty",
	        pp.product_id as "productId",
	        p.product_name as "productName",
	        TO_CHAR(wr.created_at, 'YYYY-MM-DD HH24:MI') as "productionTime",
	        wo.emp_id as "workerId"
	    FROM work_result wr
	    INNER JOIN work_order wo ON wr.work_order_id = wo.work_order_id
	    INNER JOIN product_plan pp ON wo.plan_id = pp.plan_id
	    INNER JOIN product p ON pp.product_id = p.product_id
	    WHERE wr.in_id IS NULL
	    AND wr.good_qty > 0
	    ORDER BY wr.created_at DESC
	</select>
	
	<!-- work_result의 in_id 업데이트 -->
	<update id="updateWorkResultInId">
	    UPDATE work_result
	    SET in_id = #{inId},
	        updated_at = SYSDATE
	    WHERE result_id = #{resultId}
	</update>
	
	<!-- 단순 카운트 쿼리들 -->
	<select id="countWorkResult" resultType="int">
	    SELECT COUNT(*) FROM work_result
	</select>
	
	<select id="countNullInId" resultType="int">
	    SELECT COUNT(*) FROM work_result WHERE in_id IS NULL AND good_qty > 0
	</select>
	
	<select id="testDirectQuery" resultType="map">
	    SELECT 
	        1 as "resultId",
	        'TEST' as "productId"
	    FROM work_result 
	    WHERE ROWNUM = 1
	</select>
	
	<!-- 거래처 목록 조회 (PURCHASE 타입만) -->
	<select id="selectClientsList" resultType="map">
	    SELECT 
	        client_id as "clientId",
	        client_name as "clientName"
	    FROM client
	    WHERE client_status = 'ACTIVE'
	    AND client_type = 'PURCHASE' 
	    ORDER BY client_name
	</select>
	
	<!-- 반려 사유 공통코드 조회 -->
	<select id="selectRejectReasons" resultType="map">
	    SELECT 
	        com_dt_id as "code",
	        com_dt_nm as "name"
	    FROM common_dt_code
	    WHERE UPPER(com_id) = 'DEFECT'
	    AND use_yn = 'Y'
	    ORDER BY com_dt_id
	</select>
	
	<!-- 창고 타입별 조회 -->
	<select id="selectWarehouseListByType" resultType="com.erp_mes.mes.stock.dto.WarehouseDTO">
	    SELECT 
	        warehouse_id as warehouseId,
	        warehouse_name as warehouseName
	    FROM warehouse
	    WHERE warehouse_type = #{warehouseType}
	    AND warehouse_status = 'Y'
	    ORDER BY warehouse_name
	</select>
	
	<!-- product 테이블 재고 증가 -->
	<update id="updateProductQuantity">
	    UPDATE product 
	    SET quantity = NVL(quantity, 0) + #{inCount}
	    WHERE product_id = #{productId}
	</update>
	
	<!-- 배치별 그룹화된 입고 목록 -->
	<select id="selectGroupedInputList" resultType="map">
	    SELECT 
	        batch_id as "batchId",
	        TO_CHAR(MAX(in_complete), 'YYYY-MM-DD') as "inDate",
	        TO_CHAR(MAX(in_complete), 'HH24:MI') as "inTime",
	        MAX(in_type) as "inType",
	        COUNT(*) as "totalCount",  <!-- 품목 수를 COUNT(*)로 변경 -->
	        SUM(in_count) as "totalQty",  <!-- 총 수량 추가 -->
	        MAX(i.emp_id) as "empId",
	        MAX(e.emp_name) as "empName"
	    FROM input i
	    LEFT JOIN employee e ON i.emp_id = e.emp_id
	    WHERE batch_id IS NOT NULL
	    <if test="date != null and date != ''">
	        AND TRUNC(in_complete) = TO_DATE(#{date}, 'YYYY-MM-DD')
	    </if>
	    <if test="inType != null and inType != ''">
	        AND in_type = #{inType}
	    </if>
	    GROUP BY batch_id
	    ORDER BY MAX(in_complete) DESC
	</select>
	
	<!-- 오늘 배치 건수 조회 -->
	<select id="getTodayBatchCount" resultType="int">
	    SELECT NVL(COUNT(DISTINCT batch_id), 0)
	    FROM input
	    WHERE batch_id LIKE 'B' || #{today} || '%'
	</select>
	
	<!-- 배치ID로 입고 목록 조회 -->
	<select id="selectInputListByBatch" resultType="map">
	    SELECT 
	        i.in_id as "inId",
	        i.warehouse_id as "warehouseId",
	        w.warehouse_name as "warehouseName",
	        i.material_id as "materialId",
	        m.material_name as "materialName",
	        i.product_id as "productId",
	        p.product_name as "productName",
	        i.result_id as "resultId",  
	        i.client_id as "clientId",
	        c.client_name as "clientName",
	        i.in_count as "inCount",
	        i.emp_id as "empId",
	        e.emp_name as "empName",
	        i.in_status as "inStatus",
	        i.in_type as "inType",
	        i.in_reason as "inReason",
	        i.in_remark as "inRemark",
	        TO_CHAR(i.in_complete, 'YYYY-MM-DD HH24:MI:SS') as "inComplete",
	        i.location_id as "locationId",
	        i.batch_id as "batchId",
	        wr.work_order_id as "workOrderId"  
	    FROM input i
	    LEFT JOIN warehouse w ON i.warehouse_id = w.warehouse_id
	    LEFT JOIN material m ON i.material_id = m.material_id
	    LEFT JOIN product p ON i.product_id = p.product_id
	    LEFT JOIN client c ON i.client_id = c.client_id
	    LEFT JOIN employee e ON i.emp_id = e.emp_id
	    LEFT JOIN work_result wr ON i.result_id = wr.result_id 
	    WHERE i.batch_id = #{batchId}
	    ORDER BY i.in_complete DESC
	</select>
	
	<!-- 재사용 가능한 위치 조회 (item_amount = 0인 곳) -->
	<select id="getReusableLocations" resultType="string">
	    SELECT location_id 
	    FROM warehouse_item
	    WHERE warehouse_id = #{warehouseId}
	    AND material_id = #{materialId}
	    AND item_amount = 0
	    AND use_yn = 'Y'
	    ORDER BY location_id
	</select>
	
	<!-- 입고 위치 업데이트 -->
    <update id="updateInputLocation">
	    UPDATE input 
	    SET location_id = #{locationId},
	        update_date = SYSDATE
	    WHERE in_id = #{inId}
	</update>
	
	<!-- item_location 테이블에 새 위치 추가 -->
	<insert id="insertItemLocation" parameterType="map">
	    INSERT INTO item_location (
	        warehouse_id, location_id, loc_zone, loc_rack, 
	        loc_level, loc_cell, zone_yn, emp_id, create_date
	    ) VALUES (
	        #{warehouseId}, #{locationId}, #{locZone}, #{locRack},
	        #{locLevel}, #{locCell}, #{zoneYn}, #{empId}, SYSDATE
	    )
	</insert>
	
	<!-- warehouse_item 저장/업데이트 -->
	<insert id="insertOrUpdateWarehouseItem" parameterType="map">
	    MERGE INTO warehouse_item wi
	    USING (SELECT #{locationId} as location_id FROM dual) src
	    ON (wi.location_id = src.location_id AND wi.product_id = #{productId})
	    WHEN MATCHED THEN
	        UPDATE SET 
	            item_amount = item_amount + #{itemAmount},
	            update_date = SYSDATE
	    WHEN NOT MATCHED THEN
	        INSERT (manage_id, warehouse_id, product_id, item_amount, 
	                use_yn, create_date, location_id, emp_id)
	        VALUES (#{manageId}, #{warehouseId}, #{productId}, #{itemAmount},
	                'Y', SYSDATE, #{locationId}, #{empId})
	</insert>
	
	<!-- 1000개 미만으로 채워진 위치 조회 -->
	<select id="getPartiallyFilledLocations" resultType="map">
	    <![CDATA[
	    SELECT 
	        location_id as "locationId",
	        item_amount as "itemAmount"
	    FROM warehouse_item
	    WHERE warehouse_id = #{warehouseId}
	    AND product_id = #{productId}
	    AND item_amount < #{maxAmount}
	    AND use_yn = 'Y'
	    ORDER BY item_amount DESC
	    ]]>
	</select>

	<!-- 기존 위치에 수량 추가 -->
	<update id="updateWarehouseItemAmount">
	    UPDATE warehouse_item
	    SET item_amount = item_amount + #{addAmount},
	        update_date = SYSDATE
	    WHERE location_id = #{locationId}
	    AND product_id = #{productId}
	</update>
	
	<!-- 새 위치에 삽입 -->
	<insert id="insertWarehouseItem" parameterType="map">
	    INSERT INTO warehouse_item (
	        manage_id, warehouse_id, product_id, item_amount,
	        use_yn, create_date, location_id, emp_id
	    ) VALUES (
	        #{manageId}, #{warehouseId}, #{productId}, #{itemAmount},
	        'Y', SYSDATE, #{locationId}, #{empId}
	    )
	</insert>
	
	<!-- Material 재고 증가 -->
	<update id="updateMaterialQuantity">
	    UPDATE material 
	    SET quantity = NVL(quantity, 0) + #{inCount}
	    WHERE material_id = #{materialId}
	</update>
	
	<!-- 부품/반제품만 조회 (입고용) -->
	<select id="selectMaterialsForInput" resultType="map">
	    SELECT 
	        material_id as "materialId",
	        material_name as "materialName", 
	        material_type as "materialType"
	    FROM material
	    WHERE material_type IN ('부품', '반제품')
	    ORDER BY material_type, material_name
	</select>
	
	<!-- Material용 부분채워진 위치 조회 -->
	<select id="getPartiallyFilledLocationsMaterial" resultType="map">
	    <![CDATA[
	    SELECT 
	        location_id as "locationId",
	        item_amount as "itemAmount"
	    FROM warehouse_item
	    WHERE warehouse_id = #{warehouseId}
	    AND material_id = #{materialId}
	    AND item_amount < #{maxAmount}
	    AND use_yn = 'Y'
	    ORDER BY item_amount DESC
	    ]]>
	</select>
	
	<!-- Material warehouse_item 수량 추가 -->
	<update id="updateWarehouseItemAmountMaterial">
	    UPDATE warehouse_item
	    SET item_amount = item_amount + #{addAmount, jdbcType=INTEGER},
	        update_date = SYSDATE
	    WHERE location_id = #{locationId}
	    AND material_id = #{materialId}
	</update>
	
	<!-- 0924 input 테이블 manage_id 업데이트 -->
	<update id="updateInputManageId">
	    UPDATE input 
	    SET manage_id = #{manageId}
	    WHERE in_id = #{inId}
	</update>
	
	<!-- Material warehouse_item 신규 삽입 (중복 체크) -->
	<insert id="insertWarehouseItemMaterial">
	    INSERT INTO warehouse_item (
	        manage_id,
	        warehouse_id, 
	        material_id,
	        item_amount,
	        use_yn,
	        create_date,
	        location_id,
	        emp_id
	    ) SELECT 
	        #{manageId},
	        #{warehouseId},
	        #{materialId},
	        #{itemAmount},
	        'Y',
	        SYSDATE,
	        #{locationId},
	        #{empId}
	    FROM dual
	    WHERE NOT EXISTS (
	        SELECT 1 FROM warehouse_item 
	        WHERE location_id = #{locationId} 
	        AND material_id = #{materialId}
	    )
	</insert>
	
	<select id="getLocationCountForMaterial" resultType="int">
	    SELECT COUNT(DISTINCT location_id)
	    FROM warehouse_item
	    WHERE warehouse_id = #{warehouseId}
	    AND material_id = #{materialId}
	    AND item_amount > 0
	</select>
	
	
	<!-- manage_id로 재고 수량 조회 -->
	<select id="getMaterialStockByManageId" resultType="int">
	    SELECT NVL(item_amount, 0)
	    FROM warehouse_item
	    WHERE manage_id = #{manageId}
	    AND use_yn = 'Y'
	</select>
	<!-- 0924 manage_id별 Material 재고 조회 -->
	<select id="getMaterialStockGroupByManageId" resultType="map">
	    SELECT 
	        wi.manage_id as "manageId",
	        wi.material_id as "materialId",
	        wi.warehouse_id as "warehouseId",
	        w.warehouse_name as "warehouseName",
	        wi.location_id as "locationId",
	        wi.item_amount as "itemAmount",
	        TO_CHAR(wi.create_date, 'YYYY-MM-DD HH24:MI') as "createDate",
	        wi.emp_id as "empId"
	    FROM warehouse_item wi
	    INNER JOIN warehouse w ON wi.warehouse_id = w.warehouse_id
	    WHERE wi.material_id = #{materialId}
	    AND wi.item_amount > 0
	    AND wi.use_yn = 'Y'
	    ORDER BY wi.create_date ASC  <!-- 입고순(오래된것부터) 정렬 -->
	</select>
	
	<!-- 이미 있으면 수량만 업데이트 -->
	<update id="updateExistingMaterialLocation">
	    UPDATE warehouse_item
	    SET item_amount = item_amount + #{itemAmount},
	        update_date = SYSDATE
	    WHERE location_id = #{locationId} 
	    AND material_id = #{materialId}
	</update>
	
	<!-- ==================== 출고 관리 ==================== -->

	<!-- 출고 목록 조회 -->
	<select id="selectOutputList" resultType="map">
	    SELECT 
	        o.out_id as "outId",
	        o.product_id as "productId",
	        o.material_id as "materialId", 
	        o.out_count as "outCount",
	        o.out_type as "outType",  
	        o.batch_id as "batchId",
	        TO_CHAR(o.out_complete, 'YYYY-MM-DD HH24:MI') as "outDate"
	    FROM output o
	    WHERE 1=1
	    <if test="outType != null and outType != ''">
	        AND o.out_type = #{outType}
	    </if>
	    <if test="outStatus != null and outStatus != ''">
	        AND o.out_type = #{outStatus} 
	    </if>
	    ORDER BY o.out_id DESC
	</select>
	
	<!-- 오늘 출고 건수 -->
	<select id="getTodayOutputCount" resultType="int">
	    SELECT NVL(COUNT(*), 0)
	    FROM output
	    WHERE (out_id LIKE 'OUT' || #{today} || '%'
	       OR out_id LIKE 'MOUT' || #{today} || '%')
	</select>
	
	<!-- 오늘 배치 건수 -->
	<select id="getTodayOutputBatchCount" resultType="integer">
	    SELECT NVL(MAX(TO_NUMBER(SUBSTR(batch_id, -3))), 0)
	    FROM output 
	    WHERE batch_id LIKE 'MOB' || #{today} || '%'
	</select>
	
	<!-- 출고 등록 -->
	<insert id="insertOutput">
	    INSERT INTO output (
	        out_id, 
	        <if test="productId != null">product_id,</if>
	        <if test="materialId != null">material_id,</if>
	        warehouse_id, 
	        out_count, 
	        out_type, 
	        emp_id, 
	        batch_id,
	        <if test="manageId != null">manage_id,</if>
	        <if test="locationId != null">location_id,</if>
	        <if test="orderId != null">order_id,</if>
	        <if test="planId != null">product_plan,</if>
	        <if test="workOrderId != null">work_order_id,</if>  <!-- 추가 -->
	        update_date
	    ) VALUES (
	        #{outId}, 
	        <if test="productId != null">#{productId},</if>
	        <if test="materialId != null">#{materialId},</if>
	        #{warehouseId}, 
	        #{outCount},
	        #{outType}, 
	        #{empId}, 
	        #{batchId},
	        <if test="manageId != null">#{manageId},</if>
	        <if test="locationId != null">#{locationId},</if>
	        <if test="orderId != null">#{orderId},</if>
	        <if test="planId != null">#{planId},</if>
	        <if test="workOrderId != null">#{workOrderId},</if>  <!-- 추가 -->
	        SYSDATE
	    )
	</insert>
	
	<insert id="insertLotMaster" parameterType="map">
	    INSERT INTO lot_master (
	        lot_id,
	        target_id,        
	        target_id_value, 
	        table_name,
	        type,
	        material_code,
	        created_at
	    ) VALUES (
	        #{lotId},
	        'out_id',         
	        #{targetId},      
	        #{tableName},
	        #{type},
	        #{materialCode},
	        SYSDATE
	    )
	</insert>
	
	<!-- Material인지 확인 -->
	<select id="checkIsMaterial" resultType="boolean">
	    SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
	    FROM material
	    WHERE material_id = #{productId}
	</select>
	
	<!-- 출고 정보 조회 -->
	<select id="selectOutputById" resultType="map">
	    SELECT 
	        out_id,
	        material_id,
	        product_id,
	        warehouse_id,
	        location_id,
	        manage_id,
	        out_count,
	        out_type,
	        work_order_id
	    FROM output 
	    WHERE out_id = #{outId}
	</select>
	
	<!-- 출고 상태 변경 -->
	<update id="updateOutputStatus">
	    UPDATE output
	    SET out_status = #{status},
	        out_complete = SYSDATE,
	        update_date = SYSDATE
	    WHERE out_id = #{outId}
	</update>
	
	<!-- 배치별 출고 목록 조회 -->
	<select id="selectOutputListByBatch" resultType="map">
	    SELECT 
	        o.out_id as "outId",
	        CASE 
	            WHEN o.product_id IS NOT NULL THEN o.product_id
	            WHEN o.material_id IS NOT NULL THEN o.material_id
	            ELSE 'UNKNOWN'
	        END as "productId",
	        CASE 
	            WHEN o.material_id IS NOT NULL THEN m.material_name
	            WHEN o.product_id IS NOT NULL THEN p.product_name
	            ELSE 'UNKNOWN'
	        END as "productName",
	        CASE 
	            WHEN o.material_id IS NOT NULL THEN m.unit
	            WHEN o.product_id IS NOT NULL THEN p.unit
	            ELSE 'EA'
	        END as "unit",
	        o.out_count as "outCount",
	        o.out_remark as "outRemark",
	        o.out_type as "outType",
	        o.batch_id as "batchId",
	        o.warehouse_id as "warehouseId",
	        o.emp_id as "empId",
	        e.emp_name as "empName",
	        TO_CHAR(o.update_date, 'YYYY-MM-DD HH24:MI') as "outDate"
	    FROM output o
	    LEFT JOIN material m ON o.material_id = m.material_id
	    LEFT JOIN product p ON o.product_id = p.product_id
	    LEFT JOIN employee e ON o.emp_id = e.emp_id
	    WHERE o.batch_id = #{batchId}
	    ORDER BY o.out_id
	</select>
	
	<select id="getAllProductLocations" resultType="map">
	    SELECT 
	        wi.warehouse_id as "warehouseId",
	        wi.location_id as "locationId", 
	        wi.manage_id as "manageId",
	        wi.item_amount as "itemAmount"
	    FROM warehouse_item wi
	    WHERE wi.product_id = #{productId}
	    AND wi.item_amount > 0
	    AND wi.use_yn = 'Y'
	    ORDER BY wi.item_amount ASC
	</select>
	
	<!-- 날짜별 배치 목록 조회 -->
	<select id="selectOutputBatches">
	    SELECT 
	        batch_id as "batchId",
	        COUNT(*) as "itemCount",
	        SUM(out_count) as "totalCount",
	        TO_CHAR(MIN(update_date), 'YYYY-MM-DD') as "outDate",
	        TO_CHAR(MIN(update_date), 'HH24:MI') as "outTime",
	        <!-- 대기중인 건수 추가 -->
	        SUM(CASE WHEN out_type = '출고대기' THEN 1 ELSE 0 END) as "pendingCount",
	        SUM(CASE WHEN out_type = '출고완료' THEN 1 ELSE 0 END) as "completedCount"
	    FROM output
	    WHERE batch_id IS NOT NULL
	    GROUP BY batch_id
	    HAVING SUM(CASE WHEN out_type = '출고대기' THEN 1 ELSE 0 END) > 0  <!-- 대기중인 것만 -->
	    ORDER BY MIN(update_date) DESC
	</select>
	
	<!-- warehouse_item에서 manage_id 조회 -->
	<select id="getManageIdByWarehouse" resultType="string">
	    SELECT manage_id 
	    FROM warehouse_item 
	    WHERE (product_id = #{productId} OR material_id = #{productId})
	    AND warehouse_id = #{warehouseId}
	    AND use_yn = 'Y'
	    AND manage_id IS NOT NULL
	    AND ROWNUM = 1
	</select>
	
	<!-- Material 전체 재고 조회 -->
	<select id="getMaterialTotalStock" resultType="int">
	    SELECT NVL(SUM(item_amount), 0)
	    FROM warehouse_item
	    WHERE material_id = #{materialId}
	    AND use_yn = 'Y'
	</select>
	
	<!-- Product 전체 재고 조회 -->
	<select id="getProductTotalStock" resultType="int">
	    SELECT NVL(SUM(item_amount), 0)
	    FROM warehouse_item
	    WHERE product_id = #{productId}
	    AND use_yn = 'Y'
	</select>
	
	<!-- Product 재고 위치 조회 -->
	<select id="getProductStockLocations" resultType="map">
	    SELECT 
	        location_id as "locationId",
	        item_amount as "itemAmount"
	    FROM warehouse_item
	    WHERE product_id = #{productId}
	    AND warehouse_id = #{warehouseId}
	    AND item_amount > 0
	    AND use_yn = 'Y'
	    ORDER BY item_amount ASC
	</select>
	
	<!-- Material 재고 위치 조회 -->
	<select id="getMaterialStockLocations" resultType="map">
	    SELECT 
	        location_id as "locationId",
	        item_amount as "itemAmount"
	    FROM warehouse_item
	    WHERE material_id = #{materialId}
	    AND warehouse_id = #{warehouseId}
	    AND item_amount > 0
	    AND use_yn = 'Y'
	    ORDER BY item_amount ASC
	</select>
	
	<!-- warehouse_item Product 재고 차감 -->
	<update id="reduceWarehouseItemStock">
	    UPDATE warehouse_item
	    SET item_amount = item_amount - #{qty},
	        update_date = SYSDATE
	    WHERE product_id = #{productId}
	    AND warehouse_id = #{warehouseId}
	    AND location_id = #{locationId}
	</update>
	
	<!-- warehouse_item Material 재고 차감 -->
	<update id="reduceMaterialWarehouseStock">
	    UPDATE warehouse_item
	    SET item_amount = item_amount - #{qty, jdbcType=INTEGER},
	        update_date = SYSDATE
	    WHERE material_id = #{materialId, jdbcType=VARCHAR}
	    AND warehouse_id = #{warehouseId, jdbcType=VARCHAR}
	    AND location_id = #{locationId, jdbcType=VARCHAR}
	</update>
	
	<!-- Product 수량 감소 -->
	<update id="reduceProductQuantity">
	    UPDATE product
	    SET quantity = quantity - #{qty}
	    WHERE product_id = #{productId}
	</update>
	
	<!-- Material 수량 감소 -->
	<update id="reduceMaterialQuantity">
	    UPDATE material
	    SET quantity = quantity - #{qty}
	    WHERE material_id = #{materialId}
	</update>
	
	<!-- 출고 삭제 -->
	<delete id="deleteOutput">
	    DELETE FROM output WHERE out_id = #{outId}
	</delete>
	
	<!-- 재고 포함 자재 목록 조회 (warehouse_item 합산) -->
	<select id="selectMaterialsWithStock" resultType="map">
	    SELECT 
	        m.material_id as "materialId",
	        m.material_name as "materialName",
	        m.material_type as "materialType",
	        NVL((SELECT SUM(wi.item_amount) 
	             FROM warehouse_item wi 
	             WHERE wi.material_id = m.material_id 
	             AND wi.use_yn = 'Y'), 0) as "quantity"
	    FROM material m
	    WHERE m.material_type IN ('부품', '반제품')
	    ORDER BY m.material_type, m.material_name
	</select>
	
	<!-- 재고 포함 완제품 목록 조회 (warehouse_item 합산) -->
	<select id="selectProductsWithStock" resultType="map">
	    SELECT 
	        p.product_id as "productId",
	        p.product_name as "productName",
	        '완제품' as "productType",
	        NVL((SELECT SUM(wi.item_amount) 
	             FROM warehouse_item wi 
	             WHERE wi.product_id = p.product_id 
	             AND wi.use_yn = 'Y'), 0) as "quantity"
	    FROM product p
	    WHERE p.product_type = 'PTYPE001'
	    ORDER BY p.product_name
	</select>
	
	<!-- 재고가 있는 창고 조회 -->
	<select id="getWarehousesWithStock" resultType="map">
	    SELECT DISTINCT
	        w.warehouse_id as "warehouseId",
	        w.warehouse_name as "warehouseName",
	        SUM(wi.item_amount) as "stock"
	    FROM warehouse w
	    INNER JOIN warehouse_item wi ON w.warehouse_id = wi.warehouse_id
	    WHERE (wi.product_id = #{productId} OR wi.material_id = #{productId})
	    AND wi.item_amount > 0
	    AND wi.use_yn = 'Y'
	    GROUP BY w.warehouse_id, w.warehouse_name
	    ORDER BY SUM(wi.item_amount) DESC
	</select>
	
	<!-- 0923 Material 재고 조회 -->
	<select id="getMtlStockQty" resultType="int">
	    SELECT NVL(item_amount, 0)
	    FROM warehouse_item
	    WHERE material_id = #{materialId}
	    AND warehouse_id = #{warehouseId}
	    AND location_id = #{locationId}
	    AND use_yn = 'Y'
	</select>
	
	<!-- Material warehouse_item 업데이트 -->
	<update id="updateMtlStock">
	    UPDATE warehouse_item
	    SET item_amount = #{newQty},
	        update_date = SYSDATE
	    WHERE material_id = #{materialId}
	    AND warehouse_id = #{warehouseId}
	    AND location_id = #{locationId}
	</update>
	
	<!-- Material warehouse_item 삭제 -->
	<delete id="deleteMtlStock">
	    DELETE FROM warehouse_item
	    WHERE material_id = #{materialId}
	    AND warehouse_id = #{warehouseId}
	    AND location_id = #{locationId}
	</delete>
	
	<!-- Material 테이블 동기화 -->
	<update id="syncMaterialQty">
	    UPDATE material m
	    SET m.quantity = (
	        SELECT NVL(SUM(wi.item_amount), 0)
	        FROM warehouse_item wi
	        WHERE wi.material_id = m.material_id
	        AND wi.use_yn = 'Y'
	    )
	    WHERE m.material_id = #{materialId}
	</update>
	
	<!-- 모든 창고의 Material 재고 위치 조회 -->
	<select id="getAllMaterialLocations" resultType="map">
	    SELECT 
	        warehouse_id as "warehouseId",
	        location_id as "locationId",
	        item_amount as "itemAmount",
	        manage_id as "manageId"
	    FROM warehouse_item
	    WHERE material_id = #{materialId}
	    AND item_amount > 0
	    AND use_yn = 'Y'
	    ORDER BY item_amount ASC
	</select>
	
	<!-- 0925 manage_id별 출고 시퀀스 조회 -->
	<select id="getOutputSeqByManageId" resultType="int">
	    SELECT NVL(MAX(TO_NUMBER(SUBSTR(out_id, -2))), 0)
	    FROM output
	    WHERE manage_id = #{manageId}
	    AND out_id LIKE 'OUT' || #{today} || '%'
	</select>
	
	<!-- 0925 출고 상태(type) 변경 -->
	<update id="updateOutputType">
	    UPDATE output
	    SET out_type = #{type},
	        out_complete = CASE 
	            WHEN #{type} = '출고완료' THEN SYSDATE 
	            ELSE out_complete 
	        END,
	        update_date = SYSDATE
	    WHERE out_id = #{outId}
	</update>
	
	<!-- 0926 수주 대기 목록 조회 -->
	<select id="selectPendingOrders" resultType="map">
	    SELECT 
	        o.order_id as "orderId",
	        o.client_id as "clientId", 
	        o.client_name as "clientName",
	        TO_CHAR(o.delivery_date, 'YYYY-MM-DD') as "deliveryDate",
	        o.total_order_qty as "totalQty",
	        o.order_status as "status",
	        (SELECT COUNT(*) FROM orders_detail od WHERE od.order_id = o.order_id) as "itemCount"
	    FROM orders o
	    WHERE o.order_status NOT IN ('completion') 
	    ORDER BY o.order_date DESC, o.order_id DESC
	</select>
	
	<!-- 수주 상세 조회 -->
	<select id="selectOrderDetails" resultType="map">
	    SELECT 
	        od.product_id as "productId",
	        od.product_name as "productName",
	        od.order_qty as "orderQty",
	        NVL((SELECT SUM(out_count) 
	             FROM output o
	             WHERE o.order_id = od.order_id 
	             AND o.product_id = od.product_id
	             AND o.out_type = '출고완료'), 0) as "shippedQty",
	        p.quantity as "stock"
	    FROM orders_detail od
	    LEFT JOIN product p ON od.product_id = p.product_id
	    WHERE od.order_id = #{orderId}
	    ORDER BY od.id
	</select>
	
	<!-- 수주 상세 출하수량 업데이트 -->
	<update id="updateOrderDetailShipped">
	    <![CDATA[
	    UPDATE orders_detail
	    SET order_detail_status = 
	        CASE
	            WHEN order_qty <= (SELECT NVL(SUM(out_count), 0)
	                              FROM output 
	                              WHERE order_id = #{orderId} 
	                              AND product_id = #{productId}
	                              AND out_type = '출고완료')
	            THEN 'completion'
	            ELSE 'inshipment'
	        END,
	        update_at = SYSDATE
	    WHERE order_id = #{orderId}
	    AND product_id = #{productId}
	    ]]>
	</update>
	
	<!-- 수주 상태 업데이트 -->
	<update id="updateOrderStatus">
	    UPDATE orders
	    SET order_status = #{status},
	        update_at = SYSDATE
	    WHERE order_id = #{orderId}
	</update>
	
	<!-- 오늘 완제품 출고 배치 건수 -->
	<select id="getTodayProductOutputBatchCount" resultType="integer">
	    SELECT NVL(MAX(TO_NUMBER(SUBSTR(batch_id, -3))), 0)
	    FROM output 
	    WHERE batch_id LIKE 'POB' || #{today} || '%'
	</select>
	
	<!-- output 테이블에 work_order_id 업데이트 -->
	<update id="updateOutputWorkOrder">
	    UPDATE output
	    SET work_order_id = #{workOrderId},
	        update_date = SYSDATE
	    WHERE out_id = #{outId}
	</update>
	
	<!-- 완제품 manage_id별 재고 조회 -->
	<select id="getProductStockGroupByManageId" resultType="map">
	    SELECT 
	        wi.manage_id as "manageId",
	        wi.product_id as "productId",
	        wi.warehouse_id as "warehouseId",
	        w.warehouse_name as "warehouseName",
	        wi.location_id as "locationId",
	        wi.item_amount as "itemAmount",
	        TO_CHAR(wi.create_date, 'YYYY-MM-DD HH24:MI') as "createDate"
	    FROM warehouse_item wi
	    INNER JOIN warehouse w ON wi.warehouse_id = w.warehouse_id
	    WHERE wi.product_id = #{productId}
	    AND wi.item_amount > 0
	    AND wi.use_yn = 'Y'
	    ORDER BY wi.create_date ASC 
	</select>
	
	<!-- 특정 접두사의 최대 번호 조회 -->
	<select id="getMaxOutputCount" resultType="integer">
	    SELECT NVL(MAX(TO_NUMBER(SUBSTR(out_id, LENGTH(#{prefix}) + 1))), 0)
	    FROM output
	    WHERE out_id LIKE #{prefix} || '%'
	    AND REGEXP_LIKE(SUBSTR(out_id, LENGTH(#{prefix}) + 1), '^[0-9]+$')
	</select>
	
	<!-- 생산계획 대기 목록 조회 -->
	<select id="selectPendingProductPlans" resultType="map">
	    SELECT 
	        pp.plan_id as "planId",
	        pp.product_id as "productId",
	        p.product_name as "productName",
	        pp.plan_quantity as "planQuantity",
	        TO_CHAR(pp.start_date, 'YYYY-MM-DD') as "startDate",
	        TO_CHAR(pp.end_date, 'YYYY-MM-DD') as "endDate",
	        TO_CHAR(pp.due_date, 'YYYY-MM-DD') as "dueDate",
	        pp.plan_status as "status"
	    FROM product_plan pp
	    LEFT JOIN product p ON pp.product_id = p.product_id
	    WHERE pp.plan_status = 'POSSIBLE'
	    ORDER BY pp.due_date, pp.plan_id
	</select>
	
	<!-- 생산계획별 BOM 상세 조회 -->
	<select id="selectPlanBOMDetails" resultType="map">
	    SELECT 
	        b.bom_id as "bomId",
	        b.material_id as "materialId",
	        m.material_name as "materialName",
	        b.quantity as "bomQty",
	        pp.plan_quantity as "planQty",
	        (b.quantity * pp.plan_quantity) as "requiredQty",
	        NVL((SELECT SUM(wi.item_amount) 
	             FROM warehouse_item wi 
	             WHERE wi.material_id = b.material_id 
	             AND wi.use_yn = 'Y'), 0) as "currentStock"
	    FROM product_plan pp
	    INNER JOIN bom b ON pp.product_id = b.product_id
	    LEFT JOIN material m ON b.material_id = m.material_id
	    WHERE pp.plan_id = #{planId}
	    ORDER BY b.material_id
	</select>
	
	<!--=====================================================================-->
	<!-- 창고 단일 조회 -->
	<select id="selectWarehouseInfoById" resultType="com.erp_mes.mes.stock.dto.WarehouseDTO">
	    SELECT 
	        w.warehouse_id as warehouseId,
	        w.warehouse_name as warehouseName,
	        w.warehouse_type as warehouseType,
	        w.warehouse_location as warehouseLocation,
	        w.emp_id as empId,
	        e.emp_name as empName
	    FROM warehouse w
	    LEFT JOIN employee e ON w.emp_id = e.emp_id
	    WHERE w.warehouse_id = #{warehouseId}
	</select>
	
	<!-- 창고 재고 레이아웃 조회 -->
	<select id="selectWarehouseStockLayout" resultType="map">
	    SELECT 
	        il.location_id as "locationId",
	        il.loc_zone as "zone",
	        il.loc_rack as "rack",
	        il.loc_level as "level",
	        il.loc_cell as "cell",
	        wi.manage_id as "manageId",
	        wi.material_id as "materialId",
	        wi.product_id as "productId",
	        COALESCE(m.material_name, p.product_name, '비어있음') as "itemName",
	        COALESCE(m.material_id, p.product_id, '') as "itemCode",
	        COALESCE(wi.item_amount, 0) as "currentQty",
	        COALESCE(wi.max_amount, 1000) as "maxQty",
	        CASE 
	            WHEN wi.item_amount IS NULL THEN 0
	            ELSE ROUND(wi.item_amount * 100.0 / COALESCE(wi.max_amount, 1000), 1)
	        END as "usagePercent",
	        wi.emp_id as "empId",
	        e.emp_name as "empName",
	        TO_CHAR(wi.update_date, 'YYYY-MM-DD HH24:MI') as "updateDate"
	    FROM item_location il
	    LEFT JOIN warehouse_item wi ON il.location_id = wi.location_id AND wi.use_yn = 'Y'
	    LEFT JOIN material m ON wi.material_id = m.material_id
	    LEFT JOIN product p ON wi.product_id = p.product_id
	    LEFT JOIN employee e ON wi.emp_id = e.emp_id
	    WHERE il.warehouse_id = #{warehouseId}
	    AND il.zone_yn = 'Y'
	    ORDER BY il.loc_zone, il.loc_rack, il.loc_level DESC, il.loc_cell
	</select>
	
	<!-- 위치 상세 조회 -->
	<select id="selectLocationDetail" resultType="map">
	    SELECT 
	        il.location_id as "locationId",
	        il.warehouse_id as "warehouseId",
	        w.warehouse_name as "warehouseName",
	        il.loc_zone as "zone",
	        il.loc_rack as "rack",
	        il.loc_level as "level",
	        il.loc_cell as "cell",
	        wi.manage_id as "manageId",
	        COALESCE(m.material_id, p.product_id) as "itemCode",
	        COALESCE(m.material_name, p.product_name) as "itemName",
	        COALESCE(m.unit, p.unit) as "unit",
	        wi.item_amount as "currentQty",
	        wi.max_amount as "maxQty",
	        wi.emp_id as "empId",
	        e.emp_name as "empName",
	        TO_CHAR(wi.create_date, 'YYYY-MM-DD') as "createDate",
	        TO_CHAR(wi.update_date, 'YYYY-MM-DD HH24:MI') as "lastUpdate",
	        wi.lot_id as "lotId"
	    FROM item_location il
	    LEFT JOIN warehouse_item wi ON il.location_id = wi.location_id
	    LEFT JOIN warehouse w ON il.warehouse_id = w.warehouse_id
	    LEFT JOIN material m ON wi.material_id = m.material_id
	    LEFT JOIN product p ON wi.product_id = p.product_id
	    LEFT JOIN employee e ON wi.emp_id = e.emp_id
	    WHERE il.location_id = #{locationId}
	</select>
	
	<!-- 창고 통계 쿼리들 -->
	<select id="getTotalLocations" resultType="int">
	    SELECT COUNT(*) FROM item_location 
	    WHERE warehouse_id = #{warehouseId} AND zone_yn = 'Y'
	</select>
	
	<select id="getUsedLocations" resultType="int">
	    SELECT COUNT(DISTINCT wi.location_id)
	    FROM warehouse_item wi
	    INNER JOIN item_location il ON wi.location_id = il.location_id
	    WHERE il.warehouse_id = #{warehouseId}
	    AND wi.item_amount > 0
	    AND wi.use_yn = 'Y'
	</select>
	
	<select id="getTotalStockInWarehouse" resultType="int">
	    SELECT NVL(SUM(wi.item_amount), 0)
	    FROM warehouse_item wi
	    INNER JOIN item_location il ON wi.location_id = il.location_id
	    WHERE il.warehouse_id = #{warehouseId}
	    AND wi.use_yn = 'Y'
	</select>
	
	<!-- 창고 내 빈 위치 수 조회 -->
	<select id="getEmptyLocationCnt" resultType="int">
	    SELECT COUNT(*) 
	    FROM item_location il
	    WHERE il.warehouse_id = #{warehouseId}
	    AND il.zone_yn = 'Y'
	    AND NOT EXISTS (
	        SELECT 1 FROM warehouse_item wi
	        WHERE wi.location_id = il.location_id
	        AND wi.item_amount > 0
	        AND wi.use_yn = 'Y'
	    )
	</select>
	<!--=======================-->
	<select id="getUnstartedWorkOrder" resultType="map">
	    SELECT work_order_id as "workOrderId"
    FROM work_order
    WHERE plan_id = #{planId}
    AND work_order_status = '미착수'
    AND ROWNUM = 1
	</select>
	
</mapper>