<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.erp_mes.mes.stock.mapper.StockMapper">
    
    <resultMap id="stockResultMap" type="com.erp_mes.mes.stock.dto.StockDTO">
        <result property="productId" column="product_id"/>
        <result property="productName" column="product_name"/>
        <result property="productType" column="product_type"/>
        <result property="itemAmount" column="item_amount"/>
        <result property="warehouseName" column="warehouse_name"/>
        <result property="warehouseId" column="warehouse_id"/>
        <result property="locationId" column="location_id"/>
        <result property="quantity" column="quantity"/>
    </resultMap>
    
    <resultMap id="warehouseResultMap" type="com.erp_mes.mes.stock.dto.WarehouseDTO">
        <result property="warehouseId" column="warehouse_id"/>
        <result property="warehouseName" column="warehouse_name"/>
    </resultMap>
    
    <!-- ==================== 재고 현황 관련 ==================== -->
    
    <!-- 전체 재고 목록 조회 (material + product 통합) -->
	<select id="getAllStockList" resultMap="stockResultMap">
	    SELECT * FROM (
	        SELECT 
	            m.material_id as product_id,
	            m.material_name as product_name,
	            m.material_type as product_type,
	            NVL((SELECT SUM(wi.item_amount) 
	                 FROM warehouse_item wi 
	                 WHERE wi.material_id = m.material_id 
	                 AND wi.use_yn = 'Y'), 0) as quantity  -- warehouse_item 합계
	        FROM material m
	        WHERE 1=1
	        <if test="productName != null and productName != ''">
	            AND m.material_name LIKE '%' || #{productName} || '%'
	        </if>
	        
	        UNION ALL
	        
	        SELECT 
	            p.product_id,
	            p.product_name,
	            CASE WHEN p.product_type = 'PTYPE001' THEN '완제품' 
	                 ELSE p.product_type 
	            END as product_type,
	            NVL((SELECT SUM(wi.item_amount) 
	                 FROM warehouse_item wi 
	                 WHERE wi.product_id = p.product_id 
	                 AND wi.use_yn = 'Y'), 0) as quantity  
	        FROM product p
	        WHERE p.product_type = 'PTYPE001'
	        <if test="productName != null and productName != ''">
	            AND p.product_name LIKE '%' || #{productName} || '%'
	        </if>
	    )
	    ORDER BY product_type DESC, product_id
	</select>
    
    <!-- 특정 위치의 재고 수량 조회 -->
	<select id="getWarehouseItemQtyByLocation" resultType="int">
	    SELECT NVL(item_amount, 0)
	    FROM warehouse_item
	    WHERE material_id = #{materialId}
	    AND warehouse_id = #{warehouseId}
	    AND location_id = #{locationId}
	    AND use_yn = 'Y'
	</select>
	
	<!-- Material 창고별 재고 상세 조회 -->
	<select id="getMaterialWarehouseStock" resultType="map">
	    SELECT 
	        wi.warehouse_id as "warehouseId",
	        w.warehouse_name as "warehouseName",
	        wi.location_id as "locationId",
	        wi.item_amount as "itemAmount"
	    FROM warehouse_item wi
	    INNER JOIN warehouse w ON wi.warehouse_id = w.warehouse_id
	    WHERE wi.material_id = #{materialId}
	    AND wi.use_yn = 'Y'
	    AND wi.item_amount > 0
	    ORDER BY w.warehouse_name, wi.location_id
	</select>
    
    <!-- 검사방법 목록 조회 -->
	<select id="getInspectionMethods" resultType="map">
	    SELECT 
	        TO_CHAR(inspection_fm_id) as "inspectionFmId", 
	        item_name as "itemName",
	        method_name as "methodName",
	        inspection_type as "inspectionType"
	    FROM inspection_fm
	    ORDER BY item_name
	</select>
    
    <!-- Material 재고 차감 (투입용) -->
    <update id="reduceMaterialStock">
        UPDATE material 
        SET quantity = NVL(quantity, 0) - #{reduceQty}
        WHERE material_id = #{materialId}
    </update>
    
    <!-- 재고 목록 조회 (기존) -->
    <select id="getStockList" resultMap="stockResultMap">
        SELECT 
            p.product_id,
            p.product_name,
            p.product_type,
            p.quantity
        FROM product p
        WHERE 1=1
        <if test="productName != null and productName != ''">
            AND p.product_name LIKE '%' || #{productName} || '%'
        </if>
        ORDER BY p.product_id
    </select>
    
    <!-- 창고 목록 조회 -->
    <select id="getWarehouseList" resultMap="warehouseResultMap">
        SELECT 
            warehouse_id,
            warehouse_name
        FROM warehouse
        WHERE warehouse_status = 'Y'
        ORDER BY warehouse_name
    </select>
    
    <!-- 재고 상세 조회 -->
    <select id="getStockDetail" resultMap="stockResultMap">
        SELECT 
            p.product_id,
            p.product_name,
            p.product_type,
            wi.item_amount,
            w.warehouse_name,
            w.warehouse_id,
            wi.location_id
        FROM warehouse_item wi
        INNER JOIN product p ON wi.product_id = p.product_id
        INNER JOIN warehouse w ON wi.warehouse_id = w.warehouse_id
        WHERE p.product_id = #{productId}
        AND wi.use_yn = 'Y'
    </select>
    
    <!-- 재고 수량 업데이트 -->
    <update id="updateStockAmount">
        UPDATE warehouse_item
        SET item_amount = #{itemAmount},
            update_date = SYSDATE
        WHERE product_id = #{productId}
        AND warehouse_id = #{warehouseId}
    </update>
    
    <!-- ==================== Material 테이블 관련 (부품/반제품) ==================== -->
    
    <!-- 자재 목록 조회 (material 테이블) -->
    <select id="selectMaterialListFromMaterial" resultType="com.erp_mes.mes.stock.dto.MaterialDTO">
	    SELECT 
	        m.material_id as materialId,
	        m.material_name as materialName,
	        m.material_type as materialType,
	        m.unit,
	        m.spec,
	        m.price,
	        m.quantity,
	        m.emp_id as empId,
	        e.emp_name as empName,
	        m.inspection_fm_id as inspectionFmId,
	        i.item_name as inspectionItemName,
	        m.created_at as createdAt,
	        m.updated_at as updatedAt
	    FROM material m
	    LEFT JOIN employee e ON m.emp_id = e.emp_id
	    LEFT JOIN inspection_fm i ON m.inspection_fm_id = i.inspection_fm_id
	    WHERE 1=1
	    <if test="materialType != null and materialType != ''">
	        AND m.material_type = #{materialType}
	    </if>
	    <if test="searchKeyword != null and searchKeyword != ''">
	        AND (m.material_id LIKE '%' || #{searchKeyword} || '%'
	            OR m.material_name LIKE '%' || #{searchKeyword} || '%')
	    </if>
	    ORDER BY m.created_at DESC
	</select>
	
	<!-- 공통코드 가져오기 -->
	<select id="getMaterialTypes" resultType="map">
	    SELECT 
	        COM_DT_ID as "code",
	        COM_DT_NM as "name"
	    FROM common_dt_code
	    WHERE COM_HD_CD = 'PTYPE'
	    AND USE_YN = 'Y'
	</select>
    
    <!-- 자재 중복 체크 -->
    <select id="existsMaterialById" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM material
        WHERE material_id = #{materialId}
    </select>
    
    <!-- 자재 등록 -->
    <insert id="insertIntoMaterial">
	    INSERT INTO material (
	        material_id, material_name, material_type, unit, 
	        spec, price, quantity, emp_id, 
	        inspection_fm_id,  
	        created_at
	    ) VALUES (
	        #{materialId}, #{materialName}, #{materialType}, #{unit}, 
	        #{spec}, #{price, jdbcType=NUMERIC}, #{quantity, jdbcType=NUMERIC},
	        #{empId}, 
	        #{inspectionFmId, jdbcType=NUMERIC}, 
	        SYSDATE
	    )
	</insert>
    
    <!-- 자재 수정 -->
    <update id="updateMaterialTable">
        UPDATE material
        SET material_name = #{materialName},
            material_type = #{materialType},
            unit = #{unit},
            spec = #{spec},
            price = #{price, jdbcType=NUMERIC},
            emp_id = #{empId},
            updated_at = SYSDATE
        WHERE material_id = #{materialId}
    </update>
    
    <!-- 단위 목록 조회 (공통코드) -->
	<select id="getUnitList" resultType="map">
	    SELECT 
	        COM_DT_ID as "code",
	        COM_DT_NM as "name"
	    FROM common_dt_code
	    WHERE com_id = 'UNIT'
	    AND USE_YN = 'Y'
	    ORDER BY COM_DT_ID
	</select>
    
    <!-- 자재 삭제 -->
    <delete id="deleteMaterialsFromTable">
        DELETE FROM material
        WHERE material_id IN
        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
    
    <!-- 자재 최근 거래 체크 -->
    <select id="checkRecentTransactionForMaterial" resultType="int">
        SELECT COUNT(*) FROM (
            SELECT 1 FROM input 
            WHERE product_id = #{materialId} 
            AND in_complete > ADD_MONTHS(SYSDATE, -1)
            UNION ALL
            SELECT 1 FROM output 
            WHERE product_id = #{materialId} 
            AND out_complete > ADD_MONTHS(SYSDATE, -1)
        )
    </select>
    
    <!-- material 삭제 시 warehouse_item도 삭제 -->
	<delete id="deleteWarehouseItemsByMaterial">
	    DELETE FROM warehouse_item
	    WHERE material_id = #{materialId}
	</delete>
    
    <!-- ==================== Product 테이블 관련 (완제품) ==================== -->
    
    <!-- 제품 목록 조회 (완제품만) -->
    <select id="selectProductList" resultType="com.erp_mes.mes.stock.dto.ProductDTO">
        SELECT 
            p.product_id as productId,
            p.product_name as productName,
            p.product_type as productType,
            p.unit,
            p.price,
            p.quantity,
            p.emp_id as empId,
            e.emp_name as empName,
            p.created_at as createdAt,
            p.updated_at as updatedAt
        FROM product p
        LEFT JOIN employee e ON p.emp_id = e.emp_id
        WHERE product_type = '완제품'
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (product_id LIKE '%' || #{searchKeyword} || '%'
                OR product_name LIKE '%' || #{searchKeyword} || '%')
        </if>
        ORDER BY created_at DESC
    </select>
    
    <!-- 제품 등록 -->
    <insert id="insertProduct">
        INSERT INTO product (
            product_id, 
            product_name, 
            product_type, 
            unit, 
            price, 
            quantity, 
            emp_id, 
            created_at
        ) VALUES (
            #{productId}, 
            #{productName}, 
            '완제품', 
            #{unit}, 
            #{price, jdbcType=NUMERIC},
            #{quantity, jdbcType=NUMERIC},
            #{empId}, 
            SYSDATE
        )
    </insert>
    
    <!-- 제품 수정 -->
    <update id="updateProduct">
        UPDATE product
        SET product_name = #{productName},
            unit = #{unit},
            price = #{price, jdbcType=NUMERIC},
            emp_id = #{empId},
            updated_at = SYSDATE
        WHERE product_id = #{productId}
    </update>
    
    <!-- 제품 삭제 -->
    <delete id="deleteProducts">
        DELETE FROM product
        WHERE product_id IN
        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
    
    <!-- 제품 최근 거래 체크 -->
    <select id="checkRecentTransaction" resultType="int">
        SELECT COUNT(*) FROM (
            SELECT 1 FROM input 
            WHERE product_id = #{productId} 
            AND in_complete > ADD_MONTHS(SYSDATE, -1)
            UNION ALL
            SELECT 1 FROM output 
            WHERE product_id = #{productId} 
            AND out_complete > ADD_MONTHS(SYSDATE, -1)
        )
    </select>
    
    <!-- 제품별 warehouse_item 삭제 -->
    <delete id="deleteWarehouseItemsByProduct">
        DELETE FROM warehouse_item
        WHERE product_id = #{productId}
    </delete>
    
    <!-- ==================== 창고 재고 관리 ==================== -->
    
    <!-- 특정 제품의 창고별 재고 현황 -->
    <select id="getWarehouseStockByProduct" resultType="map">
        SELECT 
            w.warehouse_id as "warehouseId",
            w.warehouse_name as "warehouseName",
            w.warehouse_type as "warehouseType",
            NVL(SUM(wi.item_amount), 0) as "itemAmount",
            COUNT(wi.location_id) as "locationCount"
        FROM warehouse w
        LEFT JOIN warehouse_item wi 
            ON w.warehouse_id = wi.warehouse_id 
            AND wi.product_id = #{productId}
            AND wi.use_yn = 'Y'
        WHERE w.warehouse_status = 'Y'
        GROUP BY w.warehouse_id, w.warehouse_name, w.warehouse_type
        ORDER BY w.warehouse_name
    </select>
    
    <!-- 창고 재고 조회 -->
    <select id="getWarehouseItemQty" resultType="Integer">
        SELECT NVL(SUM(item_amount), 0)
        FROM warehouse_item 
        WHERE product_id = #{productId} 
        AND warehouse_id = #{warehouseId}
        AND use_yn = 'Y'
    </select>
    
    <!-- 창고 재고 업데이트 -->
    <update id="updateWarehouseItem">
        UPDATE warehouse_item 
        SET item_amount = #{newQty},
            update_date = SYSDATE
        WHERE product_id = #{productId} 
        AND warehouse_id = #{warehouseId}
        AND use_yn = 'Y'
    </update>
    
    <!-- 제품 전체 재고 계산 -->
    <select id="getTotalStockByProduct" resultType="int">
        SELECT NVL(SUM(item_amount), 0)
        FROM warehouse_item
        WHERE product_id = #{productId}
        AND use_yn = 'Y'
    </select>
    
    <!-- product 테이블 재고 업데이트 -->
    <update id="updateProductQuantity">
        UPDATE product 
        SET quantity = #{totalQty}
        WHERE product_id = #{productId}
    </update>
    
    <!-- ==================== 창고 위치 관리 ==================== -->
    
    <!-- 운영중인 특정 타입 창고 조회 -->
    <select id="getActiveWarehousesByType" resultType="string">
        SELECT warehouse_id
        FROM warehouse
        WHERE warehouse_type = #{warehouseType}
        AND warehouse_status = 'Y'
        ORDER BY warehouse_id
    </select>
    
    <!-- 빈 위치 조회 -->
    <select id="getEmptyLocations" resultType="string">
	    SELECT il.location_id
	    FROM item_location il
	    WHERE il.warehouse_id = #{warehouseId}
	    AND il.zone_yn = 'Y'
	    AND NOT EXISTS (
	        SELECT 1 FROM warehouse_item wi
	        WHERE wi.location_id = il.location_id
	        AND wi.item_amount > 0
	        AND wi.use_yn = 'Y'
	    )
	    ORDER BY il.loc_zone, il.loc_rack, il.loc_level, il.loc_cell
	    FETCH FIRST 10 ROWS ONLY
	</select>
    
    <!-- warehouse_item 등록 -->
    <insert id="insertWarehouseItem">
        INSERT INTO warehouse_item (
            manage_id,
            warehouse_id,
            product_id,
            item_amount,
            use_yn,
            create_date,
            location_id,
            emp_id
        ) VALUES (
            #{warehouseId} || '_' || #{productId},
            #{warehouseId},
            #{productId},
            #{initialQty},
            'Y',
            SYSDATE,
            #{warehouseId} || '-01-01',
            #{empId}
        )
    </insert>
    
    <!-- 위치 지정해서 warehouse_item 등록 -->
    <insert id="insertWarehouseItemWithLocation">
        INSERT INTO warehouse_item (
            manage_id, 
            warehouse_id, 
            product_id,
            item_amount, 
            location_id, 
            use_yn,
            create_date, 
            emp_id
        ) VALUES (
            #{productId} || '_' || #{locationId},
            #{warehouseId},
            #{productId},
            #{qty},
            #{locationId},
            'Y',
            SYSDATE,
            #{empId}
        )
    </insert>
    
    <insert id="insertMaterialStock">
	    INSERT INTO warehouse_item (
	        manage_id, 
	        warehouse_id, 
	        material_id,
	        item_amount, 
	        location_id, 
	        use_yn,
	        create_date, 
	        emp_id
	    ) VALUES (
	        #{materialId} || '_' || #{locationId},
	        #{warehouseId},
	        #{materialId},
	        #{qty},
	        #{locationId},
	        'Y',
	        SYSDATE,
	        #{empId}
	    )
	</insert>
	
	<!-- Material 조회 -->
	<select id="selectMaterialById" resultType="com.erp_mes.mes.stock.dto.MaterialDTO">
	    SELECT 
	        material_id as materialId,
	        material_name as materialName,
	        material_type as materialType,
	        unit,
	        quantity
	    FROM material
	    WHERE material_id = #{materialId}
	</select>
	
	<!-- Material warehouse_item 수량순 조회 -->
	<select id="getMaterialLocationsByQty" resultType="map">
	    SELECT 
	        location_id as "locationId",
	        item_amount as "itemAmount"
	    FROM warehouse_item
	    WHERE material_id = #{materialId}
	    AND warehouse_id = #{warehouseId}
	    AND item_amount > 0
	    AND use_yn = 'Y'
	    ORDER BY item_amount ASC
	</select>
	
	<!-- Material warehouse_item 재고 업데이트 -->
	<update id="updateMaterialLocationStock">
	    UPDATE warehouse_item
	    SET item_amount = #{newQty},
	        update_date = SYSDATE
	    WHERE material_id = #{materialId}
	    AND warehouse_id = #{warehouseId}
	    AND location_id = #{locationId}
	</update>
	
	<!-- Material warehouse_item 빈 위치 삭제 -->
	<delete id="deleteEmptyMaterialLocation">
	    DELETE FROM warehouse_item
	    WHERE material_id = #{materialId}
	    AND warehouse_id = #{warehouseId}
	    AND location_id = #{locationId}
	</delete>
    
    <!-- 1000개 미만인 위치 조회 -->
    <select id="getProductLocationsWithSpace" resultType="map">
        SELECT 
            location_id as "locationId",
            item_amount as "itemAmount"
        FROM warehouse_item
        WHERE product_id = #{productId}
        AND warehouse_id = #{warehouseId}
        AND item_amount &lt; 1000
        AND use_yn = 'Y'
        ORDER BY item_amount DESC
    </select>
    
    <!-- 제품 위치를 수량 오름차순으로 조회 -->
    <select id="getProductLocationsByQty" resultType="map">
        SELECT 
            location_id as "locationId",
            item_amount as "itemAmount"
        FROM warehouse_item
        WHERE product_id = #{productId}
        AND warehouse_id = #{warehouseId}
        AND item_amount > 0
        AND use_yn = 'Y'
        ORDER BY item_amount ASC
    </select>
    
    <!-- 특정 위치 재고 업데이트 -->
    <update id="updateLocationStock">
        UPDATE warehouse_item
        SET item_amount = #{newQty},
            update_date = SYSDATE
        WHERE product_id = #{productId}
        AND warehouse_id = #{warehouseId}
        AND location_id = #{locationId}
    </update>
    
    <!-- 빈 위치 삭제 -->
    <delete id="deleteEmptyLocation">
        DELETE FROM warehouse_item
        WHERE product_id = #{productId}
        AND warehouse_id = #{warehouseId}
        AND location_id = #{locationId}
    </delete>
    
    <!-- ==================== 공통 ==================== -->
    
    <!-- 직원 이름 조회 -->
    <select id="selectEmployeeName" resultType="string">
        SELECT emp_name 
        FROM employee 
        WHERE emp_id = #{empId}
    </select>
    
    <!-- 직원 목록 조회 -->
    <select id="selectEmployeeList" resultType="map">
        SELECT 
            emp_id as "empId",
            emp_name as "empName",
            emp_id || ' - ' || emp_name as "display"
        FROM employee
        ORDER BY emp_name
    </select>
    
    <!-- 품질검사기준등록시 자재아이디 이름 조회 -->
	<select id="findAllMaterials" resultType="com.erp_mes.mes.stock.dto.MaterialDTO">
	    SELECT
	        MATERIAL_ID AS materialId,
	        MATERIAL_NAME AS materialName
	    FROM MATERIAL
	</select>
    
</mapper>