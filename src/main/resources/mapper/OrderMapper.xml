<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.erp_mes.mes.business.mapper.OrderMapper">

	<resultMap id="orderWithDetailsMap" type="com.erp_mes.mes.business.dto.OrderDTO">
    	<result property="orderId" column="order_id"/>
    	<result property="clientId" column="client_id"/>
    	<result property="clientName" column="client_name"/>
    	<result property="empId" column="emp_id"/>
    	<result property="empName" column="emp_name"/>
    	<result property="orderDate" column="order_date"/>
    	<result property="deliveryDate" column="delivery_date"/>
    	<result property="totalOrderQty" column="total_order_qty"/>
    	<result property="totalOrderPrice" column="total_order_price"/>
    	<result property="orderStatus" column="order_status"/>

    <!-- items 매핑 -->
    	<collection property="items" ofType="com.erp_mes.mes.business.dto.OrderDetailDTO">
        	<result property="orderId" column="order_id"/>
        	<result property="id" column="id"/>
        	<result property="productId" column="product_id"/>
        	<result property="productName" column="product_name"/>
        	<result property="unit" column="unit"/>
        	<result property="orderQty" column="order_qty"/>
        	<result property="orderPrice" column="order_price"/>
    	</collection>
	</resultMap>

<!--  	수주 수정 모달창에 기존 값 불러오기 -->
	<select id="getOrderById" parameterType="string" resultMap="orderWithDetailsMap">
    	SELECT 
        	o.order_id,
        	o.client_id,
        	o.client_name,
        	o.delivery_date,
        	o.total_order_qty,
        	o.total_order_price,
        	o.order_status,
        	d.id,
        	d.product_id,
        	d.product_name,
        	d.unit,
        	d.order_qty,
        	d.order_price
    	FROM 
    		orders o
    	LEFT JOIN 
    		orders_detail d ON o.order_id = d.order_id
    	WHERE 
    		o.order_id = #{orderId}
	</select>

<!-- 전체 orders 개수 가져오기 -->
  	<select id="countOrders" resultType="int">
  		SELECT 
  			COUNT(*)
  		FROM 
  			orders
  	</select>
  
<!-- clientId 조회 (client_name 기준) -->
  	<select id="findClientIdByName" parameterType="string" resultType="string">
    	SELECT client_id FROM client WHERE client_name = #{clientName, jdbcType=VARCHAR}
  	</select>

<!-- 주문(orders) insert -->
  	<insert id="insertOrder" parameterType="com.erp_mes.mes.business.dto.OrderDTO">
  		INSERT INTO orders (
        	order_id, 
        	client_id, 
        	client_name, 
        	emp_id, 
        	emp_name, 
        	order_date,
        	delivery_date, 
        	total_order_qty, 
        	total_order_price, 
        	update_at
   		) VALUES (
        	#{orderId},
        	#{clientId}, 
        	#{clientName, jdbcType=VARCHAR},
        	#{empId}, 
        	#{empName}, 
        	SYSDATE,
        	#{deliveryDate, jdbcType=DATE}, 
        	#{totalOrderQty, jdbcType=INTEGER}, 
        	#{totalOrderPrice,  jdbcType=INTEGER}, 
        	SYSDATE
    )
	</insert>

<!-- 수주 상세 (orders_detail) insert -->
  	<insert id="insertOrderDetail" parameterType="com.erp_mes.mes.business.dto.OrderDetailDTO">
    	INSERT INTO orders_detail (
    		order_id,
    		id,
    		product_id,
    		product_name,
    		unit,
    		order_qty,
    		order_price,
    		create_at,
    		update_at
    	) VALUES (
    		#{orderId},
    		#{id},
    		#{productId},
    		#{productName},
    		#{unit},
    		#{orderQty},
    		#{orderPrice},
    		SYSDATE,
    		SYSDATE
    )
  	</insert>

<!-- 	수주 등록 모달창에 필요한 품목 리스트 -->
	<select id="getAllProduct" resultType="com.erp_mes.mes.stock.dto.ProductDTO">
		SELECT 
			p.product_id,
			p.product_name,
			c.com_dt_nm AS unit,
			p.price
		FROM product p
		JOIN common_dt_code c ON p.unit = c.com_dt_id
	</select>

<!-- 	수주 목록 전체 조회 -->
	<select id="getAllOrder" resultType="com.erp_mes.mes.business.dto.OrderDTO">
		SELECT 
			o.order_id,
			o.order_date,
			o.order_status,
			o.client_id,
			o.client_name,
			o.total_order_qty,
			o.total_order_price,
			o.delivery_date,
			o.emp_id,
			e.emp_name,
			o.reason
		FROM orders o 
		LEFT JOIN employee e ON o.emp_id = e.emp_id
		ORDER BY o.order_id desc
	</select>

<!-- 	수주 상세 목록 조회 -->
	<select id="getOrderDetailsByOrderId" resultType="com.erp_mes.mes.business.dto.OrderDetailDTO">
		SELECT
	    	id,
	    	order_id,
			product_id,
           	product_name,					
            order_price,
            unit,
            order_qty,
            (order_qty * order_price) AS total_price,
            order_detail_status
        FROM
            orders_detail 
        WHERE
            order_id = #{orderId}
	</select>
	
<!-- 	수주 상태 조회 -->
	<select id="findOrderStatus" resultType="string">
        SELECT 
        	order_status
        FROM 
        	orders
        WHERE 
        	order_id = #{orderId}
    </select>

<!-- 	수주 상태 update -->
    <update id="updateOrderStatus">
        UPDATE 
        	orders
        SET 
        	order_status = #{orderStatus}
        WHERE 
        	order_id = #{orderId}
    </update>
	<update id="updateOrderDetailsStatus">
        UPDATE 
        	orders_detail
        SET 
        	order_detail_status = #{orderStatus}
        WHERE 
        	order_id = #{orderId}
    </update>
    <update id="updateReason">
    	UPDATE
    		orders
    	SET
    		reason = #{reason}
    	WHERE
    		order_id = #{orderId}
    </update>    
    
<!--     수주 update -->
    <update id="updateOrder" parameterType="com.erp_mes.mes.business.dto.OrderDTO">
        UPDATE orders
        SET
            delivery_date = #{deliveryDate},
            total_order_qty = #{totalOrderQty},
            total_order_price = #{totalOrderPrice},
            update_at = SYSDATE
        WHERE
            order_id = #{orderId}
    </update>
  
<!--     수주 수정 시 orders_detail 테이블에 있는 컬럼 중 orderid가 같은 컬럼을 delete 후 다시 insert 하기 위해  -->
    <delete id="deleteOrderDetails" parameterType="string">
        DELETE
        FROM 
        	orders_detail
        WHERE
        	order_id = #{orderId}
    </delete>
    
<!--     한번의 수행에 orders_detail 테이블에 여러 컬럼을 insert  -->
    <insert id="insertOrderDetails" parameterType="java.util.List">
		INSERT ALL
		<foreach collection="list" item="item" separator=" ">
			INTO orders_detail (
				order_id,
				id,
				product_id,
				product_name,
				unit,
				order_qty,
				order_price,
				create_at,
				update_at
			) VALUES (
				#{item.orderId},
				#{item.id},
				#{item.productId},
				#{item.productName},
				#{item.unit},
				#{item.orderQty},
				#{item.orderPrice},
				SYSDATE,
				SYSDATE
			)
		</foreach>
		SELECT * FROM DUAL 		-- INSERT ALL을 수행하기위해 더미 테이블인 DUAL 테이블 사용
	</insert>
	
<!-- 	생산계획 등록 시 수주 상세 진행상태 update -->
    <update id="updateOrderDetailStatus">
        UPDATE orders_detail od
		SET od.order_detail_status = 'INPRODUCTION'
		WHERE od.product_id = #{productId}
      	AND od.order_id = #{orderId}
      	AND EXISTS (
          		SELECT 1
          		FROM product_plan pp
          		WHERE pp.product_id = od.product_id
          		AND pp.order_id = od.order_id
      )
    </update>	

</mapper>